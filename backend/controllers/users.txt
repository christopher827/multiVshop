const express=require("express")
const path=require("path")
const fs=require("fs")
const User=require("../models/user")
const cloudinary=require("cloudinary")
const jwt=require("jsonwebtoken")
const { upload } = require("../multer")
const ErrorHandler = require("../utils/ErrorHandler")
const sendMail = require("../utils/sendMail")
const catchAsyncErrors = require("../middleware/catchAsyncErrors")
const sendToken = require("../utils/jwtToken")
const {isAuthenticated} =require("../middleware/auth")
const router=express.Router()
 
// router.post("/create-user",upload.single("file"),async(req,res,next)=>{
//   try{
// const {name,email,password}=req.body;
// const userEmail=await User.findOne({email})
// if (userEmail) {
//     const filename=req.file.filename;
//     const filePath=`uploads/${filename}`
//     fs.unlink(filePath,(err)=>{
//       if (err) {
//         console.log(err)
//         res.status(500).json({message:"Error deleting file"})
//       }
//     })
//     return next(new ErrorHandler("User already exists",400))
// }
// const filename=req.file.filename;//gets the fileName of the image
// const fileUrl=path.join(filename);//gets the file path(url) and adds it to the fileName
// const user={
//     name:name,
//     email:email,
//     password:password,
//     avatar:fileUrl
// };
// const activationToken=createActivationToken(user)
// const activationUrl=`http://localhost:3000/activation/${activationToken}`
// try {
//   await
//   sendMail({
//     email:user.email,
//     subject:"Activate your account",
//     message:`Hello ${user.name}, please click on the link to activate your account:${activationUrl}`
//   })
//   res.status(201).json({
//     success:true,
//     message:`please check your email:- ${user.email} to activate your account `
//   })
// } catch (error) {
//   return next(new ErrorHandler(error.message,500))
// }

// }catch(error){
//     return next(new ErrorHandler(error.message,400))
//   }}
// );

router.post("/create-user",upload.single("file"),async(req,res,next)=>{
  try {

  const {name,email,password}=req.body;
const userEmail=await User.findOne({email})
if (userEmail) {
      const filename=req.file.filename;
    const filePath=`uploads/${filename}`
    fs.unlink(filePath,(err)=>{
      if (err) {
        console.log(err)
        res.status(500).json({message:"Error deleting file"})
      }
    })

  return res.status(400).json({message:"User Already Exists"})
}
const filename=req.file.filename;//gets the fileName of the image
const fileUrl=path.join(filename);//gets the file path(url) and adds it to the fileName

const user={
    name:name,
    email:email,
    password:password,
    avatar:fileUrl
};
// const newUser=await User.create(user)
// return res.status(201).json({message:"Account Created Successfully"})
  const activationToken=createActivationToken(user)
const activationUrl=`http://localhost:3000/activation/${activationToken}`
try {
    await
  sendMail({
    email:user.email,
    subject:"Activate your account",
    message:`Hello ${user.name}, please click on the link to activate your account:${activationUrl}`
})
res.status(201).json({message:`please check your email:- ${user.email} to activate your account`})
} catch (error) {
  return res.status(500).json({message:"Error Sending Token"})
}
}
 catch(error){
    return next(new ErrorHandler(error.message,400))
}
})
  //create activation token
const createActivationToken=(user)=>{
  return jwt.sign(user,process.env.ACTIVATION_SECRET,{
    expiresIn:"5m"
  })
}

//activate users
router.post("/activation",(async(req,res)=>{
  try {
    const {activation_token}=req.body;
    const newUser=jwt.verify(activation_token,process.env.ACTIVATION_SECRET)
    if (!newUser) {
      return res.status(400).json({message:"Invalid Token"})
    }
    const {name,email,password,avatar}=newUser;
    let user=await User.findOne({email})
    if (user) {
      return res.status(400).json({message:"User Already Exists"})
    }
 user=await User.create({
      name,email,avatar,password
    });
    sendToken(user,201,res)
  
  } catch (error) {
    return res.status(500).json({message:"Internal server Error"})
  }
}))

//login user
router.post("/login-user",async(req,res,next)=>{
    const {email,password}=req.body;
    if (!email || !password) {
      return res.status(400).json({message:"All fields must be filled"})
    }
const user=await User.findOne({email})
if (!user) {
  return res.status(400).json({message:"Email not recognised"})
}
res.status(200).json({email})
})

// load user
router.get(
  "/getuser",
  isAuthenticated,
  catchAsyncErrors(async (req, res, next) => {
    try {
      const user = await User.findById(req.user.id);

      if (!user) {
        return next(new ErrorHandler("User doesn't exists", 400));
      }

      res.status(200).json({
        success: true,
        user,
      });
    } catch (error) {
      return next(new ErrorHandler(error.message, 500));
    }
  })
);

// log out user
router.get(
  "/logout",
  catchAsyncErrors(async (req, res, next) => {
    try {
      res.cookie("token", null, {
        expires: new Date(Date.now()),
        httpOnly: true,
        sameSite: "none",
        secure: true,
      });
      res.status(201).json({
        success: true,
        message: "Log out successful!",
      });
    } catch (error) {
      return next(new ErrorHandler(error.message, 500));
    }
  })
);
module.exports=router

